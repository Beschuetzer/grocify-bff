{
	"info": {
		"_postman_id": "cd3b66cd-3d79-4284-ab8a-a4c644068f2d",
		"name": "grocify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14418289",
		"_collection_link": "https://lively-comet-477342.postman.co/workspace/nxBridge~693c9375-622a-44bf-992d-236c27ca3a29/collection/14418289-cd3b66cd-3d79-4284-ab8a-a4c644068f2d?action=share&source=collection_link&creator=14418289"
	},
	"item": [
		{
			"name": "Check  Email Availablility (false)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user/isEmailAvailable/{{userEmail}}",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user",
						"isEmailAvailable",
						"{{userEmail}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check  Email Availablility (false different case)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Fetch the global variable\r",
							"const userEmail = pm.globals.get(\"userEmail\");\r",
							"\r",
							"// Check if the global variable exists\r",
							"if (userEmail !== undefined) {\r",
							"    // Convert the value to upper case\r",
							"    const upperCaseValue = userEmail.toUpperCase();\r",
							"\r",
							"    // Set the upper case value to another variable\r",
							"    pm.environment.set(\"upperCaseEmail\", upperCaseValue);\r",
							"} else {\r",
							"    console.error(\"Global variable 'myGlobalVariable' is not defined.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user/isEmailAvailable/{{userEmailUppercase}}",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user",
						"isEmailAvailable",
						"{{userEmailUppercase}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check  Email Availablility (true)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user/isEmailAvailable/test@test.com",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user",
						"isEmailAvailable",
						"test@test.com"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save Item (Valid User)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"function getRandomInt(min, max) {\r",
							"  // Ensure that min is less than or equal to max\r",
							"  if (min > max) {\r",
							"    throw new Error('Min must be less than or equal to max');\r",
							"  }\r",
							"\r",
							"  // Generate a random number between min (inclusive) and max (exclusive)\r",
							"\r",
							"  const randomInt = min + Math.floor(Math.random() * max);\r",
							"  return randomInt;\r",
							"}\r",
							"\r",
							"// Function to generate GUID\r",
							"function generateGUID() {\r",
							"    // Generate random bytes\r",
							"    const bytes = CryptoJS.lib.WordArray.random(16);\r",
							"\r",
							"    // Convert bytes to hexadecimal string\r",
							"    const guid = CryptoJS.enc.Hex.stringify(bytes);\r",
							"\r",
							"    // Format GUID according to the standard\r",
							"    return guid.substring(0, 8) + '-' +\r",
							"        guid.substring(8, 12) + '-' +\r",
							"        guid.substring(12, 16) + '-' +\r",
							"        guid.substring(16, 20) + '-' +\r",
							"        guid.substring(20);\r",
							"}\r",
							"\r",
							"pm.request.body.raw = JSON.stringify({\r",
							"    \"item\": {\r",
							"        \"name\": \"name\",\r",
							"        \"upc\": getRandomInt(1, 999999999999).toString().padStart(12, '0'),\r",
							"        \"addedDate\": getRandomInt(1000000, 1000000000000),\r",
							"        \"frequency\": getRandomInt(1, 50),\r",
							"        \"unit\": \"month\",\r",
							"        \"images\": [ \"image1\" ],\r",
							"        \"imageToUseIndex\": 0,\r",
							"        \"fullScreenImage\": \"image1\",\r",
							"        \"lastUpdatedDate\":  getRandomInt(10000, 100000),\r",
							"        \"_id\": generateGUID()\r",
							"    },\r",
							"    \"userId\": \"{{userId}}\",\r",
							"    \"password\": \"{{userPassword}}\"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var extractedValue = jsonData._id; // Replace 'fieldName' with the actual field name\r",
							"console.log({pm, environment: pm.environment})\r",
							"pm.globals.set(\"itemId\", extractedValue); // Set the variable 'variableName' with the extracted value\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/item",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save Item (Invalid User)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"function getRandomInt(min, max) {\r",
							"  // Ensure that min is less than or equal to max\r",
							"  if (min > max) {\r",
							"    throw new Error('Min must be less than or equal to max');\r",
							"  }\r",
							"\r",
							"  // Generate a random number between min (inclusive) and max (exclusive)\r",
							"\r",
							"  const randomInt = min + Math.floor(Math.random() * max);\r",
							"  return randomInt;\r",
							"}\r",
							"\r",
							"// Function to generate GUID\r",
							"function generateGUID() {\r",
							"    // Generate random bytes\r",
							"    const bytes = CryptoJS.lib.WordArray.random(16);\r",
							"\r",
							"    // Convert bytes to hexadecimal string\r",
							"    const guid = CryptoJS.enc.Hex.stringify(bytes);\r",
							"\r",
							"    // Format GUID according to the standard\r",
							"    return guid.substring(0, 8) + '-' +\r",
							"        guid.substring(8, 12) + '-' +\r",
							"        guid.substring(12, 16) + '-' +\r",
							"        guid.substring(16, 20) + '-' +\r",
							"        guid.substring(20);\r",
							"}\r",
							"\r",
							"pm.request.body.raw = JSON.stringify({\r",
							"    \"item\": {\r",
							"        \"name\": \"name\",\r",
							"        \"upc\": getRandomInt(1, 999999999999).toString().padStart(12, '0'),\r",
							"        \"addedDate\": getRandomInt(1000000, 1000000000000),\r",
							"        \"frequency\": getRandomInt(1, 50),\r",
							"        \"unit\": \"month\",\r",
							"        \"images\": [ \"image1\" ],\r",
							"        \"imageToUseIndex\": 0,\r",
							"        \"fullScreenImage\": \"image1\",\r",
							"        \"lastUpdatedDate\":  getRandomInt(10000, 100000),\r",
							"        \"_id\": generateGUID()\r",
							"    },\r",
							"    \"userId\": \"{{invalidUserId}}\",\r",
							"    \"password\": \"{{userPassword}}\"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var extractedValue = jsonData._id; // Replace 'fieldName' with the actual field name\r",
							"console.log({pm, environment: pm.environment})\r",
							"pm.globals.set(\"itemId\", extractedValue); // Set the variable 'variableName' with the extracted value\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/item",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"function getRandomInt(min, max) {\r",
							"  // Ensure that min is less than or equal to max\r",
							"  if (min > max) {\r",
							"    throw new Error('Min must be less than or equal to max');\r",
							"  }\r",
							"\r",
							"  // Generate a random number between min (inclusive) and max (exclusive)\r",
							"\r",
							"  const randomInt = min + Math.floor(Math.random() * max);\r",
							"  return randomInt;\r",
							"}\r",
							"\r",
							"// Function to generate GUID\r",
							"function generateGUID() {\r",
							"    // Generate random bytes\r",
							"    const bytes = CryptoJS.lib.WordArray.random(16);\r",
							"\r",
							"    // Convert bytes to hexadecimal string\r",
							"    const guid = CryptoJS.enc.Hex.stringify(bytes);\r",
							"\r",
							"    // Format GUID according to the standard\r",
							"    return guid.substring(0, 8) + '-' +\r",
							"        guid.substring(8, 12) + '-' +\r",
							"        guid.substring(12, 16) + '-' +\r",
							"        guid.substring(16, 20) + '-' +\r",
							"        guid.substring(20);\r",
							"}\r",
							"\r",
							"pm.request.body.raw = JSON.stringify({\r",
							"    \"item\": {\r",
							"        \"name\": \"updatedName\",\r",
							"        \"upc\": getRandomInt(1, 999999999999).toString().padStart(12, '0'),\r",
							"        \"addedDate\": getRandomInt(1000000, 1000000000000),\r",
							"        \"frequency\": getRandomInt(1, 50),\r",
							"        \"unit\": \"month\",\r",
							"        \"images\": [ \"image1\" ],\r",
							"        \"imageToUseIndex\": 0,\r",
							"        \"fullScreenImage\": \"image1\",\r",
							"        \"lastUpdatedDate\":  getRandomInt(10000, 100000),\r",
							"        \"_id\": \"{{itemId}}\"\r",
							"    },\r",
							"    \"userId\": \"{{userId}}\",\r",
							"    \"password\": \"{{userPassword}}\"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/item",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Item",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\": \"{{itemId}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/item",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"item"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Item",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/item/{{itemId}}",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"item",
						"{{itemId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Items",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/item/user/{{userId}}",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"item",
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var upperCaseEmail = jsonData.email.toUpperCase();\r",
							"console.log({pm, environment: pm.environment, upperCaseEmail})\r",
							"pm.globals.set(\"userId\", jsonData._id); // Set the variable 'variableName' with the extracted value\r",
							"pm.globals.set(\"userEmail\", jsonData.email); // Set the variable 'variableName' with the extracted value\r",
							"pm.globals.set(\"userEmailUppercase\", upperCaseEmail); // Set the variable 'variableName' with the extracted value\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{userPassword}}\",\r\n    \"email\": \"adam.j.major@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user/{{userId}}",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User.hasPaid",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"hasPaid\": true,\r\n    \"password\": \"{{userPassword}}\",\r\n    \"currentPassword\": \"{{userPassword}}\",\r\n    \"email\": \"adam.j.major@gmail.com\",\r\n    \"_id\": \"{{userId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User.email",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"hasPaid\": false,\r\n    \"currentPassword\": \"{{userPassword}}\",\r\n    \"email\": \"adam.j.major@yahoo.com\",\r\n    \"_id\": \"{{userId}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User.password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var body = JSON.parse(pm.request.body.raw);\r",
							"console.log({body})\r",
							"if (!!body.password) {\r",
							"    console.log('saving new password')\r",
							"    pm.globals.set(\"userPassword\", body.password); // Set the variable 'variableName' with the extracted value\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{userPassword}}23\",\r\n    \"currentPassword\": \"{{userPassword}}\",\r\n    \"hasPaid\": false,\r\n    \"email\": \"adam.j.major@gmail.com\",\r\n    \"_id\": \"{{userId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update All User Fields",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"password25\",\r\n    \"currentPassword\": \"password\",\r\n    \"hasPaid\": false,\r\n    \"email\": \"adam.major@gmail.com\",\r\n    \"_id\": \"{{userId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set('userPassword', 'password')"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\": \"{{userId}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{groficyBaseUrl\n}}/user",
					"host": [
						"{{groficyBaseUrl\n}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		}
	]
}